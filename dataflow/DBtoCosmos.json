{
	"name": "DBtoCosmos",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AdvworksLS",
						"type": "DatasetReference"
					},
					"name": "SourceOrderDetails"
				},
				{
					"dataset": {
						"referenceName": "AdvworksLS",
						"type": "DatasetReference"
					},
					"name": "SourceOrderHeader"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "CosmosDbNoSqlContainer1",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "TypeCast"
				},
				{
					"name": "MakeStruct"
				},
				{
					"name": "join1"
				},
				{
					"name": "ColumnScrubber"
				},
				{
					"name": "ValueScrubber"
				},
				{
					"name": "CreateArrays"
				}
			],
			"scriptLines": [
				"source(output(",
				"          SalesOrderID as integer,",
				"          SalesOrderDetailID as integer,",
				"          CarrierTrackingNumber as string,",
				"          OrderQty as integer,",
				"          ProductID as integer,",
				"          SpecialOfferID as integer,",
				"          UnitPrice as decimal(19,4),",
				"          UnitPriceDiscount as decimal(19,4),",
				"          LineTotal as decimal(38,6),",
				"          rowguid as string,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SourceOrderDetails",
				"source(output(",
				"          SalesOrderID as integer,",
				"          RevisionNumber as integer,",
				"          OrderDate as timestamp,",
				"          DueDate as timestamp,",
				"          ShipDate as timestamp,",
				"          Status as integer,",
				"          OnlineOrderFlag as boolean,",
				"          SalesOrderNumber as string,",
				"          PurchaseOrderNumber as string,",
				"          AccountNumber as string,",
				"          CustomerID as integer,",
				"          SalesPersonID as integer,",
				"          TerritoryID as integer,",
				"          BillToAddressID as integer,",
				"          ShipToAddressID as integer,",
				"          ShipMethodID as integer,",
				"          CreditCardID as integer,",
				"          CreditCardApprovalCode as string,",
				"          CurrencyRateID as integer,",
				"          SubTotal as decimal(19,4),",
				"          TaxAmt as decimal(19,4),",
				"          Freight as decimal(19,4),",
				"          TotalDue as decimal(19,4),",
				"          Comment as string,",
				"          rowguid as string,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'select * from [Sales].[SalesOrderHeader]',",
				"     format: 'query') ~> SourceOrderHeader",
				"SourceOrderDetails derive(UnitPrice = toDouble(round(UnitPrice,2))) ~> TypeCast",
				"TypeCast derive(orderfdetailsstruct = @(orderqty=1,",
				"          unitcost=1,",
				"          salesorderdetailid=1)) ~> MakeStruct",
				"SourceOrderHeader, MakeStruct join(SourceOrderHeader@SalesOrderID == SourceOrderDetails@SalesOrderID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          SalesOrderID = SourceOrderHeader@SalesOrderID,",
				"          SalesOrderDetailID = SourceOrderDetails@SalesOrderID,",
				"          OrderDate,",
				"          Status,",
				"          SalesOrderNumber,",
				"          ShipMethod = ShipMethodID,",
				"          TotalDue,",
				"          orderdetailsstruct = orderfdetailsstruct",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> ColumnScrubber",
				"ColumnScrubber derive(TotalDue = toDouble(round(TotalDue,2))) ~> ValueScrubber",
				"ValueScrubber aggregate(groupBy(SalesOrderID),",
				"     details = collect(orderdetailsstruct),",
				"          each(match(instr(name, 'OrderQty')==0&&instr(name, 'UnitPrice')==0&&instr(name,'SalesOrderID')==0), $$ = first($$))) ~> CreateArrays",
				"CreateArrays sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'document',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          SalesOrderID,",
				"          details,",
				"          SalesOrderDetailID,",
				"          OrderDate,",
				"          Status,",
				"          SalesOrderNumber,",
				"          ShipMethod,",
				"          TotalDue,",
				"          orderdetailsstruct",
				"     )) ~> sink1"
			]
		}
	}
}