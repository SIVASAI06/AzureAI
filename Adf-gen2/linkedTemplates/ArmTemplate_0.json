{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "Adf-gen2"
		},
		"ADLSGen2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ADLSGen2'"
		},
		"AzureDBAdvworksLS_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'AzureDBAdvworksLS'"
		},
		"AzureDBLS_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'AzureDBLS'"
		},
		"AzureDLSLS_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDLSLS'"
		},
		"AzureSynapseAnalytics1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'AzureSynapseAnalytics1'"
		},
		"CosmosDbLS_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'CosmosDbLS'"
		},
		"AzureDBAdvworksLS_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "dssquad.database.windows.net"
		},
		"AzureDBAdvworksLS_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "AdventureWorks2022"
		},
		"AzureDBAdvworksLS_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "sivasai"
		},
		"AzureDBLS_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "adfgen2.database.windows.net"
		},
		"AzureDBLS_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "taxi-data"
		},
		"AzureDBLS_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "sivasai"
		},
		"AzureDLSLS_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dbtogen2.dfs.core.windows.net/"
		},
		"AzureSynapseAnalytics1_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "wsgen2-ondemand.sql.azuresynapse.net"
		},
		"AzureSynapseAnalytics1_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "SQLDW"
		},
		"AzureSynapseAnalytics1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "sivasai"
		},
		"AzureSynapseAnalytics2_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "wsgen2.sql.azuresynapse.net"
		},
		"AzureSynapseAnalytics2_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "Synapse123"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ADLSGen2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ADLSGen2_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDBAdvworksLS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('AzureDBAdvworksLS_properties_typeProperties_server')]",
					"database": "[parameters('AzureDBAdvworksLS_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": true,
					"authenticationType": "SQL",
					"userName": "[parameters('AzureDBAdvworksLS_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('AzureDBAdvworksLS_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDBLS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('AzureDBLS_properties_typeProperties_server')]",
					"database": "[parameters('AzureDBLS_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('AzureDBLS_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('AzureDBLS_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDLSLS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDLSLS_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDLSLS_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSynapseAnalytics1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"server": "[parameters('AzureSynapseAnalytics1_properties_typeProperties_server')]",
					"database": "[parameters('AzureSynapseAnalytics1_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('AzureSynapseAnalytics1_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('AzureSynapseAnalytics1_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSynapseAnalytics2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"server": "[parameters('AzureSynapseAnalytics2_properties_typeProperties_server')]",
					"database": "[parameters('AzureSynapseAnalytics2_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": true,
					"authenticationType": "SystemAssignedManagedIdentity"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CosmosDbLS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "CosmosDb",
				"typeProperties": {
					"connectionString": "[parameters('CosmosDbLS_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SelfHostedIR')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AdvworksLS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDBAdvworksLS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SalesOrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SalesOrderDetailID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CarrierTrackingNumber",
						"type": "nvarchar"
					},
					{
						"name": "OrderQty",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "ProductID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SpecialOfferID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "UnitPrice",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "UnitPriceDiscount",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "LineTotal",
						"type": "decimal",
						"precision": 38,
						"scale": 6
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "Sales",
					"table": "SalesOrderDetail"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDBAdvworksLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CosmosDbNoSqlContainer1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CosmosDbLS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CosmosDbSqlApiCollection",
				"schema": {},
				"typeProperties": {
					"collectionName": "Items"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/CosmosDbLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Gen2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDLSLS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Project-1"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "products.csv",
						"fileSystem": "dbtripdata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDLSLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SynapseAnalyticsLS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSynapseAnalytics2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Project-1"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "AggregatedData"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSynapseAnalytics2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TripAzurFaresDB')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDBLS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Project-1"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "medallion",
						"type": "nvarchar"
					},
					{
						"name": "hack_license",
						"type": "nvarchar"
					},
					{
						"name": "vendor_id",
						"type": "nvarchar"
					},
					{
						"name": "pickup_datetime",
						"type": "nvarchar"
					},
					{
						"name": "payment_type",
						"type": "nvarchar"
					},
					{
						"name": "fare_amount",
						"type": "nvarchar"
					},
					{
						"name": "surcharge",
						"type": "nvarchar"
					},
					{
						"name": "mta_tax",
						"type": "nvarchar"
					},
					{
						"name": "tip_amount",
						"type": "nvarchar"
					},
					{
						"name": "tolls_amount",
						"type": "nvarchar"
					},
					{
						"name": "total_amount",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TripFares"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDBLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TripDataAzureDB')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDBLS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Project-1"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "medallion",
						"type": "nvarchar"
					},
					{
						"name": "hack_license",
						"type": "nvarchar"
					},
					{
						"name": "vendor_id",
						"type": "nvarchar"
					},
					{
						"name": "rate_code",
						"type": "nvarchar"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "nvarchar"
					},
					{
						"name": "pickup_datetime",
						"type": "nvarchar"
					},
					{
						"name": "dropoff_datetime",
						"type": "nvarchar"
					},
					{
						"name": "passenger_count",
						"type": "nvarchar"
					},
					{
						"name": "trip_time_in_secs",
						"type": "nvarchar"
					},
					{
						"name": "trip_distance",
						"type": "nvarchar"
					},
					{
						"name": "pickup_longitude",
						"type": "nvarchar"
					},
					{
						"name": "pickup_latitude",
						"type": "nvarchar"
					},
					{
						"name": "dropoff_longitude",
						"type": "nvarchar"
					},
					{
						"name": "dropoff_latitude",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TripData"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDBLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DBtoCosmos')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AdvworksLS",
								"type": "DatasetReference"
							},
							"name": "SourceOrderDetails"
						},
						{
							"dataset": {
								"referenceName": "AdvworksLS",
								"type": "DatasetReference"
							},
							"name": "SourceOrderHeader"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CosmosDbNoSqlContainer1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "TypeCast"
						},
						{
							"name": "MakeStruct"
						},
						{
							"name": "join1"
						},
						{
							"name": "ColumnScrubber"
						},
						{
							"name": "ValueScrubber"
						},
						{
							"name": "CreateArrays"
						}
					],
					"scriptLines": [
						"source(output(",
						"          SalesOrderID as integer,",
						"          SalesOrderDetailID as integer,",
						"          CarrierTrackingNumber as string,",
						"          OrderQty as integer,",
						"          ProductID as integer,",
						"          SpecialOfferID as integer,",
						"          UnitPrice as decimal(19,4),",
						"          UnitPriceDiscount as decimal(19,4),",
						"          LineTotal as decimal(38,6),",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> SourceOrderDetails",
						"source(output(",
						"          SalesOrderID as integer,",
						"          RevisionNumber as integer,",
						"          OrderDate as timestamp,",
						"          DueDate as timestamp,",
						"          ShipDate as timestamp,",
						"          Status as integer,",
						"          OnlineOrderFlag as boolean,",
						"          SalesOrderNumber as string,",
						"          PurchaseOrderNumber as string,",
						"          AccountNumber as string,",
						"          CustomerID as integer,",
						"          SalesPersonID as integer,",
						"          TerritoryID as integer,",
						"          BillToAddressID as integer,",
						"          ShipToAddressID as integer,",
						"          ShipMethodID as integer,",
						"          CreditCardID as integer,",
						"          CreditCardApprovalCode as string,",
						"          CurrencyRateID as integer,",
						"          SubTotal as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          TotalDue as decimal(19,4),",
						"          Comment as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'select * from [Sales].[SalesOrderHeader]',",
						"     format: 'query') ~> SourceOrderHeader",
						"SourceOrderDetails derive(UnitPrice = toDouble(round(UnitPrice,2))) ~> TypeCast",
						"TypeCast derive(orderfdetailsstruct = @(orderqty=1,",
						"          unitcost=1,",
						"          salesorderdetailid=1)) ~> MakeStruct",
						"SourceOrderHeader, MakeStruct join(SourceOrderHeader@SalesOrderID == SourceOrderDetails@SalesOrderID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          SalesOrderID = SourceOrderHeader@SalesOrderID,",
						"          SalesOrderDetailID = SourceOrderDetails@SalesOrderID,",
						"          OrderDate,",
						"          Status,",
						"          SalesOrderNumber,",
						"          ShipMethod = ShipMethodID,",
						"          TotalDue,",
						"          orderdetailsstruct = orderfdetailsstruct",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ColumnScrubber",
						"ColumnScrubber derive(TotalDue = toDouble(round(TotalDue,2))) ~> ValueScrubber",
						"ValueScrubber aggregate(groupBy(SalesOrderID),",
						"     details = collect(orderdetailsstruct),",
						"          each(match(instr(name,'OrderQty')==0&&instr(name,'UnitPrice')==0&&instr(name,'SalesOrderID')==0), $$ = first($$))) ~> CreateArrays",
						"CreateArrays sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'document',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          SalesOrderID,",
						"          details,",
						"          SalesOrderDetailID,",
						"          OrderDate,",
						"          Status,",
						"          SalesOrderNumber,",
						"          ShipMethod,",
						"          TotalDue,",
						"          orderdetailsstruct",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AdvworksLS')]",
				"[concat(variables('factoryId'), '/datasets/CosmosDbNoSqlContainer1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/JoinandAggregate')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "TripDataAzureDB",
								"type": "DatasetReference"
							},
							"name": "TripdataCSV"
						},
						{
							"dataset": {
								"referenceName": "TripAzurFaresDB",
								"type": "DatasetReference"
							},
							"name": "TripFaresSQL"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SynapseAnalyticsLS",
								"type": "DatasetReference"
							},
							"name": "gen2sink"
						}
					],
					"transformations": [
						{
							"name": "InnerJoinwithTripFares"
						},
						{
							"name": "AggregateByPaymentType"
						}
					],
					"scriptLines": [
						"source(output(",
						"          medallion as string,",
						"          hack_license as string,",
						"          vendor_id as string,",
						"          rate_code as string,",
						"          store_and_fwd_flag as string,",
						"          pickup_datetime as string,",
						"          dropoff_datetime as string,",
						"          passenger_count as string,",
						"          trip_time_in_secs as string,",
						"          trip_distance as string,",
						"          pickup_longitude as string,",
						"          pickup_latitude as string,",
						"          dropoff_longitude as string,",
						"          dropoff_latitude as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> TripdataCSV",
						"source(output(",
						"          medallion as string,",
						"          hack_license as string,",
						"          vendor_id as string,",
						"          pickup_datetime as string,",
						"          payment_type as string,",
						"          fare_amount as string,",
						"          surcharge as string,",
						"          mta_tax as string,",
						"          tip_amount as string,",
						"          tolls_amount as string,",
						"          total_amount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> TripFaresSQL",
						"TripdataCSV, TripFaresSQL join(TripdataCSV@medallion == TripFaresSQL@medallion",
						"     && TripdataCSV@hack_license == TripFaresSQL@hack_license",
						"     && TripdataCSV@vendor_id == TripFaresSQL@vendor_id",
						"     && TripdataCSV@pickup_datetime == TripFaresSQL@pickup_datetime,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> InnerJoinwithTripFares",
						"InnerJoinwithTripFares aggregate(groupBy(payment_type),",
						"     average_fare = avg(toInteger(total_amount)),",
						"          total_trip_distance = sum(toInteger(trip_distance))) ~> AggregateByPaymentType",
						"AggregateByPaymentType sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     staged: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> gen2sink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/TripDataAzureDB')]",
				"[concat(variables('factoryId'), '/datasets/TripAzurFaresDB')]",
				"[concat(variables('factoryId'), '/datasets/SynapseAnalyticsLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IngestAndTransformTaxiData')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "IngestIntoADLS",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "TripDataAzureDB",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Gen2",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "JoinandAggregateData",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "IngestIntoADLS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "JoinandAggregate",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"TripdataCSV": {},
									"TripFaresSQL": {},
									"gen2sink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/TripDataAzureDB')]",
				"[concat(variables('factoryId'), '/datasets/Gen2')]",
				"[concat(variables('factoryId'), '/dataflows/JoinandAggregate')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DbtoCosmosSchema",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DBtoCosmos",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceOrderDetails": {},
									"SourceOrderHeader": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DBtoCosmos')]"
			]
		}
	]
}